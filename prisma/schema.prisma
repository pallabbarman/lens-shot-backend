// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  firstName String
  lastName  String
  email     String     @unique
  password  String
  role      Roles      @default(USER)
  contactNo String     @unique
  address   String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]
  feedbacks Feedback[]

  @@map("users")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  blogs     Blog[]
  services  Service[]

  @@map("categories")
}

model Service {
  id          String   @id @default(uuid())
  title       String
  description String
  photo       String
  price       Prices   @default(STANDART)
  categoryId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  category    Category @relation(fields: [categoryId], references: [id])

  @@map("services")
}

model Blog {
  id         String    @id @default(uuid())
  img        String
  title      String
  content    String
  categoryId String
  category   Category  @relation(fields: [categoryId], references: [id])
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  comments   Comment[]

  @@map("blogs")
}

model Comment {
  id        String   @id @default(uuid())
  comment   String
  userId    String
  blogId    String
  user      User     @relation(fields: [userId], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("comments")
}

model Feedback {
  id        String   @id @default(uuid())
  feedback  String
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedbacks")
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact")
}

enum Roles {
  USER
  ADMIN
  SUPER_ADMIN
}

enum Prices {
  STANDART
  PREMIUM
  PLATINUM
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}
